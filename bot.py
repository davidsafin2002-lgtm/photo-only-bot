import os
import logging
import threading
import time
from dotenv import load_dotenv
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '-1001805328200'))
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD', 'TAVDIN')  # –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ADMIN_CHAT_IDS = [int(x) for x in os.getenv('ADMIN_CHAT_IDS', '').split(',') if x]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
PAUSE_MODE = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–≥–∞—Ö HTTP
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

if not BOT_TOKEN or len(BOT_TOKEN) < 30:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {len(BOT_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}")
print(f"üë§ –ê–¥–º–∏–Ω—ã: {ADMIN_CHAT_IDS}")

# Flask –¥–ª—è UptimeRobot
app = Flask(__name__)

@app.route('/')
def health_check():
    return {
        "status": "ok",
        "bot": "running",
        "admins": len(ADMIN_CHAT_IDS),
        "timestamp": time.time()
    }

def run_flask():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
AUTHORIZED_USERS = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
BANNED_USERS = set()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def is_user_member(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except TelegramError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async def check_access(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if user_id in BANNED_USERS:
        return False
    if user_id in ADMIN_CHAT_IDS:
        return True  # –ê–¥–º–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è
    if user_id not in AUTHORIZED_USERS:
        return False
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    return await is_user_member(user_id, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in BANNED_USERS:
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç.")
        return

    if user_id in ADMIN_CHAT_IDS:
        status = "‚è∏Ô∏è –ü–ê–£–ó–ê" if PAUSE_MODE else "‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù"
        await update.message.reply_text(
            f"ü§ñ **PhotoOnly Bot v2.5**\n\n"
            f"üìä {status}\n"
            f"üì¢ –ö–∞–Ω–∞–ª: `{CHANNEL_ID}`\n\n"
            f"üîê –í—ã –∞–¥–º–∏–Ω!\n"
            f"üë§ –í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚è∏Ô∏è `/pause` - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            f"‚ñ∂Ô∏è `/resume` - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
            f"‚ÑπÔ∏è `/status` - –°—Ç–∞—Ç—É—Å\n"
            f"üîì `/logout` - –í—ã–π—Ç–∏\n"
            f"üîë `/list_auth` - –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö\n"
            f"üîì `/deauth <ID>` - –î–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å\n"
            f"üö´ `/ban <ID>` - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
            f"‚úÖ `/unban <ID>` - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            parse_mode='Markdown'
        )
    elif user_id in AUTHORIZED_USERS:
        is_member = await is_user_member(user_id, context)
        if not is_member:
            del AUTHORIZED_USERS[user_id]  # –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.")
            return
        status = "‚è∏Ô∏è –ü–ê–£–ó–ê" if PAUSE_MODE else "‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù"
        await update.message.reply_text(
            f"ü§ñ **PhotoOnly Bot v2.5**\n\n"
            f"üìä {status}\n"
            f"üì¢ –ö–∞–Ω–∞–ª: `{CHANNEL_ID}`\n\n"
            f"üîê –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n"
            f"üë§ –í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚è∏Ô∏è `/pause` - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            f"‚ñ∂Ô∏è `/resume` - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
            f"‚ÑπÔ∏è `/status` - –°—Ç–∞—Ç—É—Å\n",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n`/auth –≤–∞—à_–ø–∞—Ä–æ–ª—å`")

async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in BANNED_USERS:
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user_id in ADMIN_CHAT_IDS:
        if context.args:
            password = context.args[0]
            if password == ADMIN_PASSWORD:
                AUTHORIZED_USERS[user_id] = True
                await update.message.reply_text(
                    "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
                    "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã."
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await update.message.reply_text("üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: `/auth –≤–∞—à_–ø–∞—Ä–æ–ª—å`")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    is_member = await is_user_member(user_id, context)
    if not is_member:
        await update.message.reply_text("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        return

    if context.args:
        password = context.args[0]
        if password == ADMIN_PASSWORD:
            AUTHORIZED_USERS[user_id] = True
            await update.message.reply_text(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
                "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã."
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await update.message.reply_text("üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: `/auth –≤–∞—à_–ø–∞—Ä–æ–ª—å`")

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in AUTHORIZED_USERS:
        del AUTHORIZED_USERS[user_id]
        await update.message.reply_text("üîì –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    else:
        await update.message.reply_text("üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

async def pause_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_id not in AUTHORIZED_USERS:
            await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö!")
            return
        is_member = await is_user_member(user_id, context)
        if not is_member:
            del AUTHORIZED_USERS[user_id]  # –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.")
            return

    global PAUSE_MODE
    PAUSE_MODE = True
    logger.info(f"‚è∏Ô∏è –ü–ê–£–ó–ê –æ—Ç {user_id}")
    await update.message.reply_text("‚è∏Ô∏è **–ü–ê–£–ó–ê!** –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

async def resume_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_id not in AUTHORIZED_USERS:
            await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö!")
            return
        is_member = await is_user_member(user_id, context)
        if not is_member:
            del AUTHORIZED_USERS[user_id]  # –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.")
            return

    global PAUSE_MODE
    PAUSE_MODE = False
    logger.info(f"‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù –æ—Ç {user_id}")
    await update.message.reply_text("‚ñ∂Ô∏è **–ê–ö–¢–ò–í–ï–ù!** –£–¥–∞–ª—è–µ—Ç –ù–ï-—Ñ–æ—Ç–æ –∏ –ù–ï-–≤–∏–¥–µ–æ.")

async def status_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_id not in AUTHORIZED_USERS:
            await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö!")
            return
        is_member = await is_user_member(user_id, context)
        if not is_member:
            del AUTHORIZED_USERS[user_id]  # –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            await update.message.reply_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.")
            return

    status = "‚è∏Ô∏è –ü–ê–£–ó–ê" if PAUSE_MODE else "‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù"
    authorized_count = len(AUTHORIZED_USERS)
    await update.message.reply_text(
        f"üìä **{status}**\n"
        f"üì¢ –ö–∞–Ω–∞–ª: `{CHANNEL_ID}`\n"
        f"üë§ –ê–¥–º–∏–Ω—ã: {len(ADMIN_CHAT_IDS)}\n"
        f"üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {authorized_count}",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async def list_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    if AUTHORIZED_USERS:
        user_list = "\n".join([f"‚Ä¢ {uid}" for uid in AUTHORIZED_USERS.keys()])
        await update.message.reply_text(
            f"üîë **–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"{user_list}\n"
            f"üë• –í—Å–µ–≥–æ: {len(AUTHORIZED_USERS)}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("üîë –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

async def deauth_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    if context.args:
        try:
            target_id = int(context.args[0])
            if target_id in AUTHORIZED_USERS:
                del AUTHORIZED_USERS[target_id]
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID: `/deauth 123456789`")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID: `/deauth 123456789`")

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    if context.args:
        try:
            target_id = int(context.args[0])
            if target_id in ADMIN_CHAT_IDS:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return
            BANNED_USERS.add(target_id)
            await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID: `/ban 123456789`")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID: `/ban 123456789`")

async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    if context.args:
        try:
            target_id = int(context.args[0])
            BANNED_USERS.discard(target_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID: `/unban 123456789`")
    else:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID: `/unban 123456789`")

async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.channel_post:
        return

    post = update.channel_post
    if post.chat_id != CHANNEL_ID:
        return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    user_id = post.from_user.id if post.from_user else None
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è #{post.message_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    if not PAUSE_MODE and not post.photo and not post.video:
        try:
            await context.bot.delete_message(post.chat_id, post.message_id)
            logger.info(f"üóëÔ∏è –£–î–ê–õ–ï–ù–û #{post.message_id}")
        except Exception as e:
            logger.error(f"‚ùå {e}")

def main():
    print("üöÄ PhotoOnly Bot v2.5 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–æ–π")
    
    # –ó–∞–ø—É—Å–∫ Flask
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    print("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è UptimeRobot")

    # Telegram Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("auth", auth))
    application.add_handler(CommandHandler("logout", logout))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    application.add_handler(CommandHandler("pause", pause_bot))
    application.add_handler(CommandHandler("resume", resume_bot))
    application.add_handler(CommandHandler("status", status_bot))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    application.add_handler(CommandHandler("list_auth", list_auth))
    application.add_handler(CommandHandler("deauth", deauth_user))
    application.add_handler(CommandHandler("ban", ban_user))
    application.add_handler(CommandHandler("unban", unban_user))

    # –ö–∞–Ω–∞–ª
    application.add_handler(MessageHandler(
        filters.ChatType.CHANNEL & filters.Chat(chat_id=CHANNEL_ID),
        handle_channel_post
    ))

    print("‚úÖ –ó–∞–ø—É—Å–∫ Telegram polling...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
