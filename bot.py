import os
import logging
import threading
import time
from dotenv import load_dotenv
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '-1001805328200'))
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD', 'TAVDIN')  # –ü–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ADMIN_CHAT_IDS = [int(x) for x in os.getenv('ADMIN_CHAT_IDS', '').split(',') if x]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
PAUSE_MODE = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

if not BOT_TOKEN or len(BOT_TOKEN) < 30:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {len(BOT_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}")
print(f"üë§ –ê–¥–º–∏–Ω—ã: {ADMIN_CHAT_IDS}")

# Flask –¥–ª—è UptimeRobot
app = Flask(__name__)

@app.route('/')
def health_check():
    return {
        "status": "ok",
        "bot": "running",
        "admins": len(ADMIN_CHAT_IDS),
        "timestamp": time.time()
    }

def run_flask():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
AUTHORIZED_USERS = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in ADMIN_CHAT_IDS or user_id in AUTHORIZED_USERS:
        status = "‚è∏Ô∏è –ü–ê–£–ó–ê" if PAUSE_MODE else "‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù"
        await update.message.reply_text(
            f"ü§ñ **PhotoOnly Bot v2.2**\n\n"
            f"üìä {status}\n"
            f"üì¢ –ö–∞–Ω–∞–ª: `{CHANNEL_ID}`\n\n"
            f"üîê –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n"
            f"üë§ –ö–æ–º–∞–Ω–¥—ã:\n"
            f"‚è∏Ô∏è `/pause` - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n"
            f"‚ñ∂Ô∏è `/resume` - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å\n"
            f"‚ÑπÔ∏è `/status` - –°—Ç–∞—Ç—É—Å\n"
            f"üîì `/logout` - –í—ã–π—Ç–∏",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n`/auth <–≤–∞—à_–ø–∞—Ä–æ–ª—å>`")

async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if context.args:
        password = context.args[0]
        if password == ADMIN_PASSWORD:
            AUTHORIZED_USERS[user_id] = True
            await update.message.reply_text(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
                "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã."
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await update.message.reply_text("üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: `/auth <–≤–∞—à_–ø–∞—Ä–æ–ª—å>`")

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in AUTHORIZED_USERS:
        del AUTHORIZED_USERS[user_id]
        await update.message.reply_text("üîì –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    else:
        await update.message.reply_text("üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

async def pause_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in ADMIN_CHAT_IDS or user_id in AUTHORIZED_USERS:
        global PAUSE_MODE
        PAUSE_MODE = True
        logger.info(f"‚è∏Ô∏è –ü–ê–£–ó–ê –æ—Ç {user_id}")
        await update.message.reply_text("‚è∏Ô∏è **–ü–ê–£–ó–ê!** –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö!")

async def resume_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in ADMIN_CHAT_IDS or user_id in AUTHORIZED_USERS:
        global PAUSE_MODE
        PAUSE_MODE = False
        logger.info(f"‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù –æ—Ç {user_id}")
        await update.message.reply_text("‚ñ∂Ô∏è **–ê–ö–¢–ò–í–ï–ù!** –£–¥–∞–ª—è–µ—Ç –ù–ï-—Ñ–æ—Ç–æ.")
    else:
        await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö!")

async def status_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in ADMIN_CHAT_IDS or user_id in AUTHORIZED_USERS:
        status = "‚è∏Ô∏è –ü–ê–£–ó–ê" if PAUSE_MODE else "‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù"
        authorized_count = len(AUTHORIZED_USERS)
        await update.message.reply_text(
            f"üìä **{status}**\n"
            f"üì¢ –ö–∞–Ω–∞–ª: `{CHANNEL_ID}`\n"
            f"üë§ –ê–¥–º–∏–Ω—ã: {len(ADMIN_CHAT_IDS)}\n"
            f"üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {authorized_count}",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö!")

async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.channel_post:
        return

    post = update.channel_post
    if post.chat_id != CHANNEL_ID:
        return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (user_id –º–æ–∂–µ—Ç –±—ã—Ç—å None –≤ –∫–∞–Ω–∞–ª–µ)
    user_id = post.from_user.id if post.from_user else None
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è #{post.message_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è user_id)
    if not PAUSE_MODE and not post.photo:
        try:
            await context.bot.delete_message(post.chat_id, post.message_id)
            logger.info(f"üóëÔ∏è –£–î–ê–õ–ï–ù–û #{post.message_id}")
        except Exception as e:
            logger.error(f"‚ùå {e}")

def main():
    print("üöÄ PhotoOnly Bot v2.2 —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
    
    # –ó–∞–ø—É—Å–∫ Flask
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    print("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è UptimeRobot")

    # Telegram Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("auth", auth))
    application.add_handler(CommandHandler("logout", logout))
    application.add_handler(CommandHandler("pause", pause_bot))
    application.add_handler(CommandHandler("resume", resume_bot))
    application.add_handler(CommandHandler("status", status_bot))

    # –ö–∞–Ω–∞–ª
    application.add_handler(MessageHandler(
        filters.ChatType.CHANNEL & filters.Chat(chat_id=CHANNEL_ID),
        handle_channel_post
    ))

    print("‚úÖ –ó–∞–ø—É—Å–∫ Telegram polling...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
