import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º .env (–ª–æ–∫–∞–ª—å–Ω–æ) –∏–ª–∏ Environment Variables (Render)
load_dotenv()

# ‚úÖ –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '-1001805328200'))
PAUSE_MODE = os.getenv('PAUSE_MODE', 'false').lower() == 'true'

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN or len(BOT_TOKEN) < 30:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª (–ª–æ–∫–∞–ª—å–Ω–æ)")
    print("2. –ò–ª–∏ Environment Variables –≤ Render")
    exit(1)

print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {len(BOT_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = "‚è∏Ô∏è –ü–ê–£–ó–ê" if PAUSE_MODE else "‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù"
    await update.message.reply_text(
        f"ü§ñ **PhotoOnly Bot** (Secure)\n\n"
        f"{status}\n"
        f"üì¢ –ö–∞–Ω–∞–ª: `{CHANNEL_ID}`\n\n"
        f"üîí –¢–æ–∫–µ–Ω –∑–∞—â–∏—â—ë–Ω\n"
        f"‚è∏Ô∏è `/pause` - –ø–∞—É–∑–∞\n"
        f"‚ñ∂Ô∏è `/resume` - –∞–∫—Ç–∏–≤–µ–Ω",
        parse_mode='Markdown'
    )

async def pause_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global PAUSE_MODE
    PAUSE_MODE = True
    logger.info("‚è∏Ô∏è –ü–ê–£–ó–ê –í–ö–õ–Æ–ß–ï–ù–ê!")
    await update.message.reply_text("‚è∏Ô∏è **–ü–ê–£–ó–ê!** –ë–æ—Ç –ù–ï —É–¥–∞–ª—è–µ—Ç –Ω–∏—á–µ–≥–æ!")

async def resume_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global PAUSE_MODE
    PAUSE_MODE = False
    logger.info("‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù!")
    await update.message.reply_text("‚ñ∂Ô∏è **–ê–ö–¢–ò–í–ï–ù!** –£–¥–∞–ª—è–µ—Ç –Ω–µ-—Ñ–æ—Ç–æ!")

async def status_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = "‚è∏Ô∏è –ü–ê–£–ó–ê (–ù–ï —É–¥–∞–ª—è–µ—Ç)" if PAUSE_MODE else "‚ñ∂Ô∏è –ê–ö–¢–ò–í–ï–ù (—É–¥–∞–ª—è–µ—Ç)"
    await update.message.reply_text(
        f"üìä **–°–¢–ê–¢–£–°** (Secure)\n\n"
        f"{status}\n"
        f"üì¢ –ö–∞–Ω–∞–ª: `{CHANNEL_ID}`\n"
        f"üîí –¢–æ–∫–µ–Ω: –∑–∞—â–∏—â—ë–Ω\n\n"
        f"‚è∏Ô∏è `/pause`\n"
        f"‚ñ∂Ô∏è `/resume`",
        parse_mode='Markdown'
    )

async def handle_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global PAUSE_MODE
    if PAUSE_MODE or not update.channel_post:
        if PAUSE_MODE:
            logger.info("‚è∏Ô∏è –ü–ê–£–ó–ê - –ø—Ä–æ–ø—É—Å–∫")
        return
    
    post = update.channel_post
    if post.chat_id != CHANNEL_ID:
        return
    
    is_photo = bool(post.photo)
    logger.info(f"üì¢ –ü–æ—Å—Ç #{post.message_id}: —Ñ–æ—Ç–æ={is_photo}")
    
    if not is_photo:
        try:
            await context.bot.delete_message(post.chat_id, post.message_id)
            logger.info(f"üóëÔ∏è –£–î–ê–õ–ï–ù–û {post.message_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

def main():
    print("üöÄ PhotoOnly Bot (SECURE)")
    print(f"‚è∏Ô∏è –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {'–ü–ê–£–ó–ê' if PAUSE_MODE else '–ê–ö–¢–ò–í–ï–ù'}")
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .read_timeout(20)
        .write_timeout(20)
        .connect_timeout(20)
        .build()
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("pause", pause_bot))
    application.add_handler(CommandHandler("resume", resume_bot))
    application.add_handler(CommandHandler("status", status_bot))
    
    application.add_handler(MessageHandler(
        filters.ChatType.CHANNEL & filters.Chat(chat_id=CHANNEL_ID),
        handle_channel_post
    ))
    
    print("‚úÖ –ó–∞–ø—É—Å–∫ polling...")
    print("üì± –¢–µ—Å—Ç: /start –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫
    application.run_polling(
        drop_pending_updates=True,
        poll_interval=1.0,
        timeout=20,
        bootstrap_retries=5
    )

if __name__ == '__main__':
    main()